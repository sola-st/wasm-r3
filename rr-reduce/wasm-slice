#!/usr/bin/env python3

import sys, subprocess, os, subprocess, shutil
import concurrent.futures
import heuristics_finder

# this takes upto 150GB of memory.
# TODO: why?
WASMR3_PATH = os.getenv("WASMR3_PATH", "/home/wasm-r3")
BINARYEN_CORES = os.getenv("BINARYEN_CORES", 4)
PARALLEL = os.getenv
TIMEOUT = 600

# The Wasm file is given as the first and only argument to the script.
if len(sys.argv) != 4:
    print("Usage: wasm-slice <ORACLE_SCRIPT> <WASM_FILE> <OUTPUT_PATH>")
    sys.exit(1)

oracle_script = sys.argv[1]
test_input = sys.argv[2]
test_name = os.path.splitext(os.path.basename(test_input))[0]
save_path = sys.argv[3]

# We prioritize single function replay of heuristic > dynamic > all
def get_fidx():
    heuristic_fidx = heuristics_finder.get_heuristic_fidx(test_input, oracle_script)
    dynamic_fidx = heuristics_finder.get_dynamic_fidx(test_input)
    all_fidx = heuristics_finder.get_all_fidx(test_input)

    print("Heuristic function indices:", heuristic_fidx)
    dynamic_filtered = [idx for idx in dynamic_fidx if idx not in heuristic_fidx]
    print("Dynamic function indices (except heuristic):", dynamic_filtered)
    # Filter out both heuristic and dynamic indices from all
    all_filtered = [
        idx for idx in all_fidx if idx not in heuristic_fidx and idx not in dynamic_fidx
    ]
    print("All function indices (except heuristic and dynamic):", all_filtered)

    # Create a set to keep track of added indices
    added = set()
    combined_fidx = []

    # Add heuristic_fidx first
    for idx in heuristic_fidx:
        if idx not in added:
            combined_fidx.append(idx)
            added.add(idx)

    # Add dynamic_fidx second
    for idx in dynamic_fidx:
        if idx not in added:
            combined_fidx.append(idx)
            added.add(idx)

    # Add all_fidx last
    for idx in all_fidx:
        if idx not in added:
            combined_fidx.append(idx)
            added.add(idx)

    return combined_fidx


def run_slicedice(testname, fidx):
    try:
        # fidxargs = " ".join([f"-i {f}" for f in fidx.split("-")])
        command = f"timeout {TIMEOUT}s npm test slicedice -- -t {testname} -i {fidx} --alternativeTrace --alternativeDownload"
        print(command)
        output = subprocess.run(command, shell=True, text=True)
        # TODO: make this configurable
        replay_wasm_path = f'{os.getenv(
            "BENCHMARK_PATH",
            f"{WASMR3_PATH}/evaluation/benchmarks/{test_name}",
        )}/out/{fidx}/benchmarks/bin_1/replay.wasm'
        original_file_size = os.path.getsize(test_input)
        replay_file_size = os.path.getsize(replay_wasm_path)
        interestingness_command = f"python {oracle_script} {replay_wasm_path}"
        result = subprocess.run(interestingness_command, shell=True, check=False)
        if result.returncode == 0 and replay_file_size < original_file_size:
            print(f"Oracle script passed for {testname} - {fidx}")
            replay_wasm_size = os.path.getsize(replay_wasm_path)
            print("Sliced wasm file size:", replay_wasm_size)
            shutil.copy(
                replay_wasm_path,
                save_path,
            )
            sys.exit(0)
    except Exception as e:
        print(f"Failed to run {testname} - {fidx}")
        print(e)
        return [testname, fidx, "fail"]

print(f'test_input: {test_input}')
print(f'save_path: {save_path}')

# Strip debug information from the original WebAssembly file
stripped_wasm_path = f"{os.path.dirname(test_input)}/{test_name}.stripped.wasm"
strip_command = f"{WASMR3_PATH}/third_party/wasm-tools/target/release/wasm-tools strip --all -o {stripped_wasm_path} {test_input}"
subprocess.run(strip_command, shell=True, check=True)
shutil.copy(stripped_wasm_path, test_input)

import concurrent.futures

def worker(fidx):
    try:
        print(f"Running {test_name} - {fidx}")
        run_slicedice(test_name, fidx)
        # If run_slicedice returns normally, the oracle did not pass.
        return False
    except SystemExit as e:
        # If oracle passes, run_slicedice calls sys.exit(0) with exit code 0.
        if e.code == 0:
            return True
        return False
    except Exception as ex:
        print(f"Failed to run {test_name} - {fidx}: {ex}")
        return False

# We use 3 max. 4 makes the machine reboot
max_workers = min(int(BINARYEN_CORES), 3)
with concurrent.futures.ThreadPoolExecutor(max_workers=max_workers) as executor:
    futures = {executor.submit(worker, fidx): fidx for fidx in get_fidx()}
    for future in concurrent.futures.as_completed(futures):
        try:
            success = future.result()
            if success:
                # Early exit if oracle script passed.
                executor.shutdown(wait=False, cancel_futures=True)
                sys.exit(0)
        except Exception as e:
            print(f"Error: {e}")
print("Failed to find a suitable reduced wasm file")
print("Returning original wasm file")
shutil.copy(
    test_input,
    save_path,
)